// Generated by Dagger (https://dagger.dev).
package com.todo.list.di.module;

import com.google.gson.Gson;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata({
    "com.todo.list.di.qualifier.ApiRetrofit",
    "com.todo.list.di.qualifier.ApiHttpClient",
    "com.todo.list.di.qualifier.ApiUrlGson",
    "com.todo.list.di.qualifier.ApiUrl"
})
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ApiModule_ProvideRetrofitFactory implements Factory<Retrofit> {
  private final ApiModule module;

  private final Provider<OkHttpClient> okHttpClientProvider;

  private final Provider<Gson> gsonProvider;

  private final Provider<String> baseUrlProvider;

  public ApiModule_ProvideRetrofitFactory(ApiModule module,
      Provider<OkHttpClient> okHttpClientProvider, Provider<Gson> gsonProvider,
      Provider<String> baseUrlProvider) {
    this.module = module;
    this.okHttpClientProvider = okHttpClientProvider;
    this.gsonProvider = gsonProvider;
    this.baseUrlProvider = baseUrlProvider;
  }

  @Override
  public Retrofit get() {
    return provideRetrofit(module, okHttpClientProvider.get(), gsonProvider.get(), baseUrlProvider.get());
  }

  public static ApiModule_ProvideRetrofitFactory create(ApiModule module,
      Provider<OkHttpClient> okHttpClientProvider, Provider<Gson> gsonProvider,
      Provider<String> baseUrlProvider) {
    return new ApiModule_ProvideRetrofitFactory(module, okHttpClientProvider, gsonProvider, baseUrlProvider);
  }

  public static Retrofit provideRetrofit(ApiModule instance, OkHttpClient okHttpClient, Gson gson,
      String baseUrl) {
    return Preconditions.checkNotNullFromProvides(instance.provideRetrofit(okHttpClient, gson, baseUrl));
  }
}
