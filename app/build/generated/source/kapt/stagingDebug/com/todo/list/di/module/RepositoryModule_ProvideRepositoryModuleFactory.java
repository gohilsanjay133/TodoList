// Generated by Dagger (https://dagger.dev).
package com.todo.list.di.module;

import com.todo.list.repository.MainRepository;
import com.todo.list.restfullapi.ApiService;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata("com.todo.list.di.qualifier.BaseApiService")
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class RepositoryModule_ProvideRepositoryModuleFactory implements Factory<MainRepository> {
  private final RepositoryModule module;

  private final Provider<ApiService> apiServiceProvider;

  public RepositoryModule_ProvideRepositoryModuleFactory(RepositoryModule module,
      Provider<ApiService> apiServiceProvider) {
    this.module = module;
    this.apiServiceProvider = apiServiceProvider;
  }

  @Override
  public MainRepository get() {
    return provideRepositoryModule(module, apiServiceProvider.get());
  }

  public static RepositoryModule_ProvideRepositoryModuleFactory create(RepositoryModule module,
      Provider<ApiService> apiServiceProvider) {
    return new RepositoryModule_ProvideRepositoryModuleFactory(module, apiServiceProvider);
  }

  public static MainRepository provideRepositoryModule(RepositoryModule instance,
      ApiService apiService) {
    return Preconditions.checkNotNullFromProvides(instance.provideRepositoryModule(apiService));
  }
}
