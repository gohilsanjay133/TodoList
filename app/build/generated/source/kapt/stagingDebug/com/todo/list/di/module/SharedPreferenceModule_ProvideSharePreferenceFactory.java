// Generated by Dagger (https://dagger.dev).
package com.todo.list.di.module;

import android.content.Context;
import android.content.SharedPreferences;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata("dagger.hilt.android.qualifiers.ApplicationContext")
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class SharedPreferenceModule_ProvideSharePreferenceFactory implements Factory<SharedPreferences> {
  private final SharedPreferenceModule module;

  private final Provider<Context> contextProvider;

  private final Provider<String> sharedPreferenceNameProvider;

  private final Provider<Integer> modeProvider;

  public SharedPreferenceModule_ProvideSharePreferenceFactory(SharedPreferenceModule module,
      Provider<Context> contextProvider, Provider<String> sharedPreferenceNameProvider,
      Provider<Integer> modeProvider) {
    this.module = module;
    this.contextProvider = contextProvider;
    this.sharedPreferenceNameProvider = sharedPreferenceNameProvider;
    this.modeProvider = modeProvider;
  }

  @Override
  public SharedPreferences get() {
    return provideSharePreference(module, contextProvider.get(), sharedPreferenceNameProvider.get(), modeProvider.get());
  }

  public static SharedPreferenceModule_ProvideSharePreferenceFactory create(
      SharedPreferenceModule module, Provider<Context> contextProvider,
      Provider<String> sharedPreferenceNameProvider, Provider<Integer> modeProvider) {
    return new SharedPreferenceModule_ProvideSharePreferenceFactory(module, contextProvider, sharedPreferenceNameProvider, modeProvider);
  }

  public static SharedPreferences provideSharePreference(SharedPreferenceModule instance,
      Context context, String sharedPreferenceName, int mode) {
    return Preconditions.checkNotNullFromProvides(instance.provideSharePreference(context, sharedPreferenceName, mode));
  }
}
