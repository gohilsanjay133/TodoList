// Generated by Dagger (https://dagger.dev).
package com.todo.list.di.module;

import com.todo.list.repository.MainRepository;
import com.todo.list.usecasae.TodoListUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class UseCaseModule_ProvideTodoListUseCaseFactory implements Factory<TodoListUseCase> {
  private final UseCaseModule module;

  private final Provider<MainRepository> mainRepositoryProvider;

  public UseCaseModule_ProvideTodoListUseCaseFactory(UseCaseModule module,
      Provider<MainRepository> mainRepositoryProvider) {
    this.module = module;
    this.mainRepositoryProvider = mainRepositoryProvider;
  }

  @Override
  public TodoListUseCase get() {
    return provideTodoListUseCase(module, mainRepositoryProvider.get());
  }

  public static UseCaseModule_ProvideTodoListUseCaseFactory create(UseCaseModule module,
      Provider<MainRepository> mainRepositoryProvider) {
    return new UseCaseModule_ProvideTodoListUseCaseFactory(module, mainRepositoryProvider);
  }

  public static TodoListUseCase provideTodoListUseCase(UseCaseModule instance,
      MainRepository mainRepository) {
    return Preconditions.checkNotNullFromProvides(instance.provideTodoListUseCase(mainRepository));
  }
}
