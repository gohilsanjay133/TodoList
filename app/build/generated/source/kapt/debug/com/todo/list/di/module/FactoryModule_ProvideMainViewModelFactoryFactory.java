// Generated by Dagger (https://dagger.dev).
package com.todo.list.di.module;

import com.todo.list.usecasae.TodoListUseCase;
import com.todo.list.view.todolist.TodoListViewModelFactory;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class FactoryModule_ProvideMainViewModelFactoryFactory implements Factory<TodoListViewModelFactory> {
  private final FactoryModule module;

  private final Provider<TodoListUseCase> todoListUseCaseProvider;

  public FactoryModule_ProvideMainViewModelFactoryFactory(FactoryModule module,
      Provider<TodoListUseCase> todoListUseCaseProvider) {
    this.module = module;
    this.todoListUseCaseProvider = todoListUseCaseProvider;
  }

  @Override
  public TodoListViewModelFactory get() {
    return provideMainViewModelFactory(module, todoListUseCaseProvider.get());
  }

  public static FactoryModule_ProvideMainViewModelFactoryFactory create(FactoryModule module,
      Provider<TodoListUseCase> todoListUseCaseProvider) {
    return new FactoryModule_ProvideMainViewModelFactoryFactory(module, todoListUseCaseProvider);
  }

  public static TodoListViewModelFactory provideMainViewModelFactory(FactoryModule instance,
      TodoListUseCase todoListUseCase) {
    return Preconditions.checkNotNullFromProvides(instance.provideMainViewModelFactory(todoListUseCase));
  }
}
